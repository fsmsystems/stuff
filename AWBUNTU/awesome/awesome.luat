-- Standard awesome library
require("awful")
require("awful.autofocus")
require("awful.rules")
-- Theme handling library
require("beautiful")
-- Notification library
require("naughty")

-- Toda la sequedad

imgpath = awful.util.getdir("config")..'/imgs/'
confdir = awful.util.getdir("config")..'/'
--}}}
--{{{ Utilidades/Funciones
function escape(text)
    if text then
        return awful.util.escape(text or 'UNKNOWN')
    end
end
-- Bold
function bold(text)
    return '<b>' .. text .. '</b>'
end
-- Italic
function italic(text)
    return '<i>' .. text .. '</i>'
end

-- Foreground color
function fgc(text,color)
    if not color then color = 'white' end
    return '<span color="'..color..'">'..text..'</span>'
end

-- process_read (io.popen)
function pread(cmd)
    if cmd and cmd ~= '' then
        local f, err = io.popen(cmd, 'r')
        if f then
            local s = f:read('*all')
            f:close()
            return s
        else
            print(err)
        end
    end
end

-- file_read (io.open)
function fread(cmd)
    if cmd and cmd ~= '' then
        local f, err = io.open(cmd, 'r')
        if f then
            local s = f:read('*all')
            f:close()
            return s
        else
            print(err)
        end
    end
end

--{{{ Separadores (img)
--------------------------------------------------------------------------------
separator = widget({ type = 'imagebox'
                   , name = 'separator'
                   })
separator.image = image(awful.util.getdir("config").."/imgs/separador2.png")
separator.resize = false
--}}}
--{{{ MPC (imagebox+textbox) requiere mpc/mpd
--------------------------------------------------------------------------------

-- Converts bytes to human-readable units, returns value (number) and unit (string)
function bytestoh(bytes)
    local tUnits={"K","M","G","T","P"} -- MUST be enough. :D
    local v,u
    for k=table.getn(tUnits),1,-1 do
        if math.fmod(bytes,1024^k) ~= bytes then v=bytes/(1024^k); u=tUnits[k] break end
    end
    return v or bytes,u or "B"
end

-- menos bloat creando iconos
function createIco(widget,file,click)
    if not widget or not file or not click then return nil end
    widget.image = image(imgpath..'/'..file)
    widget.resize = false
    awful.widget.layout.margins[widget] = { top = 1, bottom = 1, left = 1, right = 1 }
    widget:buttons(awful.util.table.join(
        awful.button({ }, 1, function ()
            awful.util.spawn(click,false)
        end)
    ))
end

--}}}
--{{{ Net (imagebox+textbox)
--------------------------------------------------------------------------------
-- Devuelve el tráfico de la interface de red usada como default GW.
function net_info()
    if not old_rx or not old_tx or not old_time then
        old_rx,old_tx,old_time = 0,0,1
    end
    local iface,cur_rx,cur_tx,rx,rxu,tx,txu
    local file = fread("/proc/net/route")
    if file then
        iface = file:match('(%S+)%s+00000000%s+%w+%s+0003%s+')
        if not iface or iface == '' then
            return '' --fgc('No Def GW', 'red')
        end
    else
        return "Err: /proc/net/route."
    end
    --Sacamos cur_rx y cur_tx de /proc/net/dev
    file = fread("/proc/net/dev")
    if file then
       cur_rx,cur_tx = file:match(iface..':%s*(%d+)%s+%d+%s+%d+%s+%d+%s+%d+%s+%d+%s+%d+%s+%d+%s+(%d+)%s+')
    else
        return "Err: /proc/net/dev"
    end
    cur_time = os.time()
    interval = cur_time - old_time -- diferencia entre mediciones
-- rx = ( cur_rx - old_rx ) / 1024 / interval -- resultado en kb
-- tx = ( cur_tx - old_tx ) / 1024 / interval
    if tonumber(interval) > 0 then -- porsia
        rx,rxu = bytestoh( ( cur_rx - old_rx ) / interval )
        tx,txu = bytestoh( ( cur_tx - old_tx ) / interval )
        old_rx,old_tx,old_time = cur_rx,cur_tx,cur_time
    else
        rx,tx,rxu,txu = "0","0","B","B"
    end
    return iface..fgc(bold('|'), 'green')..string.format("%04d%2s",rx,rxu)..fgc(bold('|'), 'red')..string.format("%04d%2s",tx,txu)
end
-- imagebox
net_ico = widget({ type = "imagebox" })
--createIco(net_ico,'net-wired.png', terminal..' -e screen -S awesome watch -n5 "lsof -ni"')
-- textbox
netwidget = widget({ type = 'textbox'
                   , name = 'netwidget'
                   })
-- primera llamada a la función
netwidget.text = net_info()
-- mouse_enter
netwidget:add_signal("mouse::enter", function()
    naughty.destroy(pop)
    local listen = pread("netstat -patun 2>&1 | awk '/ESTABLISHED/{ if ($4 !~ /127.0.0.1|localhost/) print \"(\"$7\")\t\"$5}'")
    pop = naughty.notify({ title = fgc('Established\n')
                         , text = listen
                         , icon = imgpath..'net-wired.png'
                         , icon_size = 32
                         , timeout = 0
                         , position = "bottom_right"
                         , bg = beautiful.bg_focus
                         })
end)
-- mouse_leave
netwidget:add_signal("mouse::leave", function() naughty.destroy(pop) end)
--}}}
--{{{ Load (magebox+textbox)


-- Devuelve el load average
function avg_load()
    local n = fread('/proc/loadavg')
    local pos = n:find(' ', n:find(' ', n:find(' ')+1)+1)
    return n:sub(1,pos-1)
end
-- imagebox
load_ico = widget({ type = "imagebox" })
createIco(load_ico,'load.png', terminal..' -e htop')
-- textbox
loadwidget = widget({ type = 'textbox'
                    , name = 'loadwidget'
                    })
-- llamada inicial a la función
loadwidget.text = avg_load()
-- mouse_enter
loadwidget:add_signal("mouse::enter", function()
    naughty.destroy(pop)
    local text = pread("uptime; echo; who")
    pop = naughty.notify({ title = fgc('Uptime\n')
                         , text = text
                         , icon = imgpath..'load.png'
                         , icon_size = 32
                         , timeout = 0
                         , position = "bottom_right"
                         , bg = beautiful.bg_focus
                         })
end)
-- mouse_leave
loadwidget:add_signal("mouse::leave", function() naughty.destroy(pop) end)

--{{{ Cpu (imagebox+textbox+graph)
--------------------------------------------------------------------------------
-- Devuelve el % de uso de cada CPU y actualiza la gráfica con la media.
-- user + nice + system + idle = 100/second
-- so diffs of: $2+$3+$4 / all-together * 100 = %
-- or: 100 - ( $5 / all-together) * 100 = %
-- or: 100 - 100 * ( $5 / all-together)= %
function cpu_info()
    if not cpu then
        cpu={}
    end
    local s = 0
    local info = fread("/proc/stat")
    if not info then
        return "Error leyendo /proc/stat"
    end
    for user,nice,system,idle in info:gmatch("cpu.-%s(%d+)%s+(%d+)%s+(%d+)%s+(%d+)") do
        if not cpu[s] then
            cpu[s]={}
            cpu[s].sum = 0
            cpu[s].res = 0
            cpu[s].idle = 0
        end
        local new_sum = user + nice + system + idle
        local diff = new_sum - cpu[s].sum
        cpu[s].res = 100
        if diff > 0 then -- siempre devería cumplirse, excepto cargas elevadas.
            cpu[s].res = 100 - 100 * (idle - cpu[s].idle) / diff
        end
        cpu[s].sum = new_sum
        cpu[s].idle = idle
        s = s + 1
    end
    -- next(cpu) devuelve nil si la tabla cpu está vacía
    if not next(cpu) then
        return "No hay cpus en /proc/stat"
    end
    if cpugraphwidget and cpu[0].res then
        cpugraphwidget:add_value(cpu[0].res)
    end
    info = ''
    for s = 0, #cpu do
        if cpu[s].res > 99 then
            info = info..fgc('C'..s..':')..fgc('LOL', 'red')
        else
            info = info..fgc('C'..s..':')..string.format("%02d",cpu[s].res)..'%'
        end
        if s ~= #cpu then
            info = info..' '
        end
    end
    return info
end
-- imagebox
cpu_ico = widget({ type = "imagebox" })
createIco(cpu_ico,'cpu.png', terminal..' -e htop')
-- textbox
cpuwidget = widget({ type = 'textbox'
                   , name = 'cpuwidget'
                   })
-- graph
cpugraphwidget = awful.widget.graph()
cpugraphwidget:set_width(40)
cpugraphwidget:set_height(13)
cpugraphwidget:set_max_value(100)
cpugraphwidget:set_background_color('black')
cpugraphwidget:set_border_color('white')
cpugraphwidget:set_gradient_angle(0)
cpugraphwidget:set_gradient_colors({'gray', 'white'})
awful.widget.layout.margins[cpugraphwidget.widget] = { top = 1, bottom = 1 }
-- primera llamada a la función
cpuwidget.text = cpu_info()
-- mouse_enter
cpuwidget:add_signal("mouse::enter", function()
    naughty.destroy(pop)
    local text = pread("ps -eo %cpu,%mem,ruser,pid,comm --sort -%cpu | head -20")
    pop = naughty.notify({ title = fgc('Processes\n')
                         , text = text
                         , icon = imgpath..'cpu.png'
                         , icon_size = 28
                         , timeout = 0
                         , position = "bottom_right"
                         , bg = beautiful.bg_focus
                         })
end)

--{{{ Memory (imagebox+textbox+progressbar)
--------------------------------------------------------------------------------
-- Devuelve la ram usada en MB(%). Tb actualiza la progressbar
function activeram()
    local total,free,buffers,cached,active,used,percent
    for line in io.lines('/proc/meminfo') do
        for key, value in string.gmatch(line, "(%w+):\ +(%d+).+") do
            if key == "MemTotal" then
                total = tonumber(value)
                if total <= 0 then --wtf
                    return ''
                end
            elseif key == "MemFree" then
                free = tonumber(value)
            elseif key == "Buffers" then
                buffers = tonumber(value)
            elseif key == "Cached" then
                cached = tonumber(value)
            end
        end
    end
    active = total-(free+buffers+cached)
    used = string.format("%.0fMB",(active/1024))
    percent = string.format("%.0f",(active/total)*100)
    if membarwidget then
        membarwidget:set_value(percent/100)
    end
    return fgc(used, theme.font_key)..fgc('('..percent..'%)', theme.font_value)
end
-- imagebox
mem_ico = widget({ type = "imagebox" })
createIco(mem_ico,'mem.png', terminal..' -e htop')
-- textbox
memwidget = widget({ type = 'textbox'
                   , name = 'memwidget'
                   })
-- progressbar
membarwidget = awful.widget.progressbar()
membarwidget:set_width(40)
membarwidget:set_height(13)
membarwidget:set_background_color('black')
membarwidget:set_border_color('white')
membarwidget:set_gradient_colors({'white', 'cyan'})
awful.widget.layout.margins[membarwidget.widget] = { top = 1, bottom = 1 }
-- Llamada inicial a la función
memwidget.text = activeram()
-- mouse_enter
memwidget:add_signal("mouse::enter", function()
    naughty.destroy(pop)
    local text = pread("free -tm")
    pop = naughty.notify({ title = fgc('Free\n')
                         , text = text
                         , icon = imgpath..'mem.png'
                         , icon_size = 32
                         , timeout = 0
                         , position = "bottom_right"
                         , bg = beautiful.bg_focus
                         })
    end)
-- mouse_leave
memwidget:add_signal("mouse::leave", function() naughty.destroy(pop) end)
---}}}
--{{{ Timers
--------------------------------------------------------------------------------
-- Hook every sec
timer1 = timer { timeout = 1 }
timer1:add_signal("timeout", function()
    cpuwidget.text = cpu_info()
    loadwidget.text = avg_load()
    netwidget.text = net_info()
    memwidget.text = activeram()
end)
timer1:start()
-- Hook called every 5 secs
timer5 = timer { timeout = 5 }
timer5:add_signal("timeout", function()
    memwidget.text = activeram()
end)
--timer5:start()
--------------------------------------------------------------------------------
--{{{ Wibox
--------------------------------------------------------------------------------




-- {{{ Variable definitions
-- Themes define colours, icons, and wallpapers
beautiful.init("/home/ferran/.config/awesome/themes/default/theme.lua")

-- This is used later as the default terminal and editor to run.
terminal = "urxvt"
editor = os.getenv("EDITOR") or "nano"
editor_cmd = terminal .. " -e " .. editor
browser = "chromium-browser"
fileman = "pcmanfm"
saver = "xscreensaver-command -lock"
-- Default modkey.
-- Usually, Mod4 is the key with a logo between Control and Alt.
-- If you do not like this or do not have such a key,
-- I suggest you to remap Mod4 to another key using xmodmap or other tools.
-- However, you can use another modifier like Mod1, but it may interact with others.
modkey = "Mod4"

-- Table of layouts to cover with awful.layout.inc, order matters.
layouts =
{
    awful.layout.suit.floating,
    awful.layout.suit.tile,
    awful.layout.suit.tile.left,
    awful.layout.suit.tile.bottom,
    awful.layout.suit.tile.top,
    awful.layout.suit.fair,
    awful.layout.suit.fair.horizontal,
    awful.layout.suit.spiral,
    awful.layout.suit.spiral.dwindle,
    awful.layout.suit.max,
    awful.layout.suit.max.fullscreen,
    awful.layout.suit.magnifier
}
-- }}}

-- {{{ Tags
-- Define a tag table which hold all screen tags.
tags = {}
for s = 1, screen.count() do
    -- Each screen has its own tag table.
    tags[s] = awful.tag({ 1, 2, 3, 4, 5, 6, 7, 8, 9 }, s, layouts[1])
end
-- }}}

-- {{{ Menu
-- Create a laucher widget and a main menu
myawesomemenu = {
   { "manual", terminal .. " -e man awesome" },
   { "edit config", editor_cmd .. " " .. awful.util.getdir("config") .. "/rc.lua" },
   { "restart", awesome.restart },
   { "quit", awesome.quit }
}

mymainmenu = awful.menu({ items = { { "awesome", myawesomemenu, beautiful.awesome_icon },
                                    { "open terminal", terminal }
                                  }
                        })

mylauncher = awful.widget.launcher({ image = image(beautiful.awesome_icon),
                                     menu = mymainmenu })
-- }}}

-- {{{ Wibox
-- Create a textclock widget
mytextclock = awful.widget.textclock({ align = "right" })

-- Create a systray
mysystray = widget({ type = "systray" })

-- Create a wibox for each screen and add it
mywibox = {}
mypromptbox = {}
mylayoutbox = {}
mytaglist = {}
mytaglist.buttons = awful.util.table.join(
                    awful.button({ }, 1, awful.tag.viewonly),
                    awful.button({ modkey }, 1, awful.client.movetotag),
                    awful.button({ }, 3, awful.tag.viewtoggle),
                    awful.button({ modkey }, 3, awful.client.toggletag),
                    awful.button({ }, 4, awful.tag.viewnext),
                    awful.button({ }, 5, awful.tag.viewprev)
                    )
mytasklist = {}
mytasklist.buttons = awful.util.table.join(
                     awful.button({ }, 1, function (c)
                                              if not c:isvisible() then
                                                  awful.tag.viewonly(c:tags()[1])
                                              end
                                              client.focus = c
                                              c:raise()
                                          end),
                     awful.button({ }, 3, function ()
                                              if instance then
                                                  instance:hide()
                                                  instance = nil
                                              else
                                                  instance = awful.menu.clients({ width=250 })
                                              end
                                          end),
                     awful.button({ }, 4, function ()
                                              awful.client.focus.byidx(1)
                                              if client.focus then client.focus:raise() end
                                          end),
                     awful.button({ }, 5, function ()
                                              awful.client.focus.byidx(-1)
                                              if client.focus then client.focus:raise() end
                                          end))

for s = 1, screen.count() do
    -- Create a promptbox for each screen
    mypromptbox[s] = awful.widget.prompt({ layout = awful.widget.layout.horizontal.leftright })
    -- Create an imagebox widget which will contains an icon indicating which layout we're using.
    -- We need one layoutbox per screen.
    mylayoutbox[s] = awful.widget.layoutbox(s)
    mylayoutbox[s]:buttons(awful.util.table.join(
                           awful.button({ }, 1, function () awful.layout.inc(layouts, 1) end),
                           awful.button({ }, 3, function () awful.layout.inc(layouts, -1) end),
                           awful.button({ }, 4, function () awful.layout.inc(layouts, 1) end),
                           awful.button({ }, 5, function () awful.layout.inc(layouts, -1) end)))
    -- Create a taglist widget
    mytaglist[s] = awful.widget.taglist(s, awful.widget.taglist.label.all, mytaglist.buttons)

    -- Create a tasklist widget
    mytasklist[s] = awful.widget.tasklist(function(c)
                                              return awful.widget.tasklist.label.currenttags(c, s)
                                          end, mytasklist.buttons)

-- Create a systray
mysystray = widget({ type = "systray" })

    -- Create the wibox
    mywibox[s] = awful.wibox({ position = "top", screen = s, border_width = 0, height = 15 })
    -- Add widgets to the wibox - order matters
    mywibox[s].widgets = {
        {
            mylauncher,
            mytaglist[s],
            mypromptbox[s],
	  -- loadwidget,
         --  load_ico,
          -- separator,
          -- netwidget,
          -- et_ico
          --                 , separator
           --                , cpugraphwidget.widget
           --                , cpuwidget
           --                , cpu_ico
           --                , separator
           --                , membarwidget.widget
           --                , memwidget
           --                , mem_ico
           --                , separator

            layout = awful.widget.layout.horizontal.leftright
        },
        mylayoutbox[s],
        mytextclock,

        s == 1 and mysystray or nil,
        mytasklist[s],
        layout = awful.widget.layout.horizontal.rightleft
    }
end
-- }}}

-- {{{ Mouse bindings
root.buttons(awful.util.table.join(
    awful.button({ }, 3, function () mymainmenu:toggle() end),
    awful.button({ }, 4, awful.tag.viewnext),
    awful.button({ }, 5, awful.tag.viewprev)
))
-- }}}

-- {{{ Key bindings
globalkeys = awful.util.table.join(
    awful.key({ modkey,           }, "Left",   awful.tag.viewprev       ),
    awful.key({ modkey,           }, "Right",  awful.tag.viewnext       ),
    awful.key({ modkey,           }, "Escape", awful.tag.history.restore),

    awful.key({ modkey,           }, "j",
        function ()
            awful.client.focus.byidx( 1)
            if client.focus then client.focus:raise() end
        end),
    awful.key({ modkey,           }, "k",
        function ()
            awful.client.focus.byidx(-1)
            if client.focus then client.focus:raise() end
        end),
    awful.key({ modkey,           }, "w", function () mymainmenu:show({keygrabber=true}) end),

    -- Layout manipulation
    awful.key({ modkey, "Shift"   }, "j", function () awful.client.swap.byidx(  1)    end),
    awful.key({ modkey, "Shift"   }, "k", function () awful.client.swap.byidx( -1)    end),
    awful.key({ modkey, "Control" }, "j", function () awful.screen.focus_relative( 1) end),
    awful.key({ modkey, "Control" }, "k", function () awful.screen.focus_relative(-1) end),
    awful.key({ modkey,           }, "u", awful.client.urgent.jumpto),
    awful.key({ modkey,           }, "Tab",
        function ()
            awful.client.focus.history.previous()
            if client.focus then
                client.focus:raise()
            end
        end),

    -- Standard program
    awful.key({ modkey,           }, "Return", function () awful.util.spawn(terminal) end),
    awful.key({ modkey, "Control" }, "r", awesome.restart),
    awful.key({ modkey, "Shift"   }, "q", awesome.quit),
    awful.key({ modkey,           }, "n", function () awful.util.spawn(browser) end),
    awful.key({ modkey,           }, "s", function () awful.util.spawn(fileman) end),
    awful.key({ modkey,           }, "l",     function () awful.tag.incmwfact( 0.05)    end),
    awful.key({ modkey,           }, "h",     function () awful.tag.incmwfact(-0.05)    end),
    awful.key({ modkey, "Shift"   }, "h",     function () awful.tag.incnmaster( 1)      end),
    awful.key({ modkey, "Shift"   }, "l",     function () awful.tag.incnmaster(-1)      end),
    awful.key({ modkey, "Control" }, "h",     function () awful.tag.incncol( 1)         end),
    awful.key({ modkey, "Control" }, "l",     function () awful.tag.incncol(-1)         end),
    awful.key({ modkey,           }, "space", function () awful.layout.inc(layouts,  1) end),
    awful.key({ modkey, "Shift"   }, "space", function () awful.layout.inc(layouts, -1) end),
    awful.key({ modkey, 	  },  "b",    function () awful.util.spawn(saver) end),

    -- Prompt
    awful.key({ modkey },            "r",     function () mypromptbox[mouse.screen]:run() end),
    awful.key({ modkey }, "x",
              function ()
                  awful.prompt.run({ prompt = "Run Lua code: " },
                  mypromptbox[mouse.screen].widget,
                  awful.util.eval, nil,
                  awful.util.getdir("cache") .. "/history_eval")
              end)
)

clientkeys = awful.util.table.join(
    awful.key({ modkey,           }, "f",      function (c) c.fullscreen = not c.fullscreen  end),
    awful.key({ modkey, "Shift"   }, "c",      function (c) c:kill()                         end),
    awful.key({ modkey, "Control" }, "space",  awful.client.floating.toggle                     ),
    awful.key({ modkey, "Control" }, "Return", function (c) c:swap(awful.client.getmaster()) end),
    awful.key({ modkey,           }, "o",      awful.client.movetoscreen                        ),
    awful.key({ modkey, "Shift"   }, "r",      function (c) c:redraw()                       end),
    awful.key({ modkey,           }, "t",      function (c) c.ontop = not c.ontop            end),
    awful.key({ modkey,           }, "n",      function (c) c.minimized = not c.minimized    end),
    awful.key({ modkey,           }, "m",
        function (c)
            c.maximized_horizontal = not c.maximized_horizontal
            c.maximized_vertical   = not c.maximized_vertical
        end)
)

-- Compute the maximum number of digit we need, limited to 9
keynumber = 0
for s = 1, screen.count() do
   keynumber = math.min(9, math.max(#tags[s], keynumber));
end

-- Bind all key numbers to tags.
-- Be careful: we use keycodes to make it works on any keyboard layout.
-- This should map on the top row of your keyboard, usually 1 to 9.
for i = 1, keynumber do
    globalkeys = awful.util.table.join(globalkeys,
        awful.key({ modkey }, "#" .. i + 9,
                  function ()
                        local screen = mouse.screen
                        if tags[screen][i] then
                            awful.tag.viewonly(tags[screen][i])
                        end
                  end),
        awful.key({ modkey, "Control" }, "#" .. i + 9,
                  function ()
                      local screen = mouse.screen
                      if tags[screen][i] then
                          awful.tag.viewtoggle(tags[screen][i])
                      end
                  end),
        awful.key({ modkey, "Shift" }, "#" .. i + 9,
                  function ()
                      if client.focus and tags[client.focus.screen][i] then
                          awful.client.movetotag(tags[client.focus.screen][i])
                      end
                  end),
        awful.key({ modkey, "Control", "Shift" }, "#" .. i + 9,
                  function ()
                      if client.focus and tags[client.focus.screen][i] then
                          awful.client.toggletag(tags[client.focus.screen][i])
                      end
                  end))
end

clientbuttons = awful.util.table.join(
    awful.button({ }, 1, function (c) client.focus = c; c:raise() end),
    awful.button({ modkey }, 1, awful.mouse.client.move),
    awful.button({ modkey }, 3, awful.mouse.client.resize))

-- Set keys
root.keys(globalkeys)
-- }}}

-- {{{ Rules
awful.rules.rules = {
    -- All clients will match this rule.
    { rule = { },
      properties = { border_width = beautiful.border_width,
                     border_color = beautiful.border_normal,
                     focus = true,
                     keys = clientkeys,
                     buttons = clientbuttons } },
    { rule = { class = "MPlayer" },
      properties = { floating = true } },
    { rule = { class = "pinentry" },
      properties = { floating = true } },
    { rule = { class = "gimp" },
      properties = { floating = true } },
    -- Set Firefox to always map on tags number 2 of screen 1.
    -- { rule = { class = "Firefox" },
    --   properties = { tag = tags[1][2] } },
}
-- }}}

-- {{{ Signals
-- Signal function to execute when a new client appears.
client.add_signal("manage", function (c, startup)
    -- Add a titlebar
    -- awful.titlebar.add(c, { modkey = modkey })

    -- Enable sloppy focus
    c:add_signal("mouse::enter", function(c)
        if awful.layout.get(c.screen) ~= awful.layout.suit.magnifier
            and awful.client.focus.filter(c) then
            client.focus = c
        end
    end)

    if not startup then
        -- Set the windows at the slave,
        -- i.e. put it at the end of others instead of setting it master.
        -- awful.client.setslave(c)

        -- Put windows in a smart way, only if they does not set an initial position.
        if not c.size_hints.user_position and not c.size_hints.program_position then
            awful.placement.no_overlap(c)
            awful.placement.no_offscreen(c)
        end
    end
end)

client.add_signal("focus", function(c) c.border_color = beautiful.border_focus end)
client.add_signal("unfocus", function(c) c.border_color = beautiful.border_normal end)
-- }}}
-- Autorun programs
autorun = true
autorunApps = 
{ 
--   "gconftool-2 -s -t bool /apps/nautilus/preferences/show_desktop false",
--   "compton -cC ",
--   "gconftool-2 -s -t bool /desktop/gnome/background/draw_background false",
--   "xscreensaver -nosplash", 	
--   "dropbox start",
--   "pidgin",
--   "synergys -f --config /etc/synergy.conf",
--   "volumeicon",
--  "parcellite"
--   "cryptkeeper",
-- "wicd-gtk -t"   
}
if autorun then
   for _, app in pairs(autorunApps) do
       awful.util.spawn(app)
   end
end

-- Hook called every minute
-- awful.hooks.timer.register(60, function ()
--     mytextbox.text = os.date(" %a %b %d, %H:%M ")
-- end)
-- }}}

loadfile(awful.util.getdir("config").."/extra.lua")()

